name: Release Folder Package

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        python-version: ['3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Tesseract OCR and Poppler (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install tesseract poppler

    - name: Install Tesseract OCR and Poppler (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install tesseract poppler
        echo "$env:ProgramFiles\Tesseract-OCR" >> $env:GITHUB_PATH
        echo "$env:ProgramFiles\poppler\bin" >> $env:GITHUB_PATH

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pyinstaller

    - name: Build folder package
      run: |
        pyinstaller OCRInvoiceParser-folder.spec

    - name: Copy Tesseract and Poppler binaries (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        # Find Tesseract
        $tess = Get-Command tesseract.exe -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Source
        if ($tess) {
          $tessDir = Split-Path $tess
          Write-Host "Found Tesseract at $tessDir"
          Copy-Item "$tessDir\*" "dist\OCRInvoiceParser\" -Recurse -Force
        } else {
          Write-Host "Tesseract not found in PATH"
        }

        # Find Poppler (look for pdfinfo.exe as a marker)
        $poppler = Get-Command pdfinfo.exe -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Source
        if ($poppler) {
          $popplerDir = Split-Path $poppler
          Write-Host "Found Poppler at $popplerDir"
          Copy-Item "$popplerDir\*" "dist\OCRInvoiceParser\" -Recurse -Force
        } else {
          Write-Host "Poppler not found in PATH"
        }

        # Create placeholder files to indicate external dependencies needed
        if (-not (Test-Path "dist/OCRInvoiceParser/tesseract.exe")) {
          Write-Host "Note: Tesseract OCR not included - users will need to install it separately"
          "Please install Tesseract OCR from: https://github.com/UB-Mannheim/tesseract/wiki" | Out-File dist/OCRInvoiceParser/TESSERACT_INSTALL_NOTE.txt
        }
        if (-not (Test-Path "dist/OCRInvoiceParser/pdfinfo.exe")) {
          Write-Host "Note: Poppler utilities not included - users will need to install them separately"
          "Please install Poppler from: https://poppler.freedesktop.org/" | Out-File dist/OCRInvoiceParser/POPPLER_INSTALL_NOTE.txt
        }

    - name: Copy Tesseract and Poppler binaries (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Find Tesseract installation path
        TESSERACT_PATH=$(which tesseract)
        if [ -z "$TESSERACT_PATH" ]; then
          echo "Tesseract not found in PATH"
          exit 1
        fi
        echo "Found Tesseract at: $TESSERACT_PATH"
        
        # Copy Tesseract binary
        cp "$TESSERACT_PATH" dist/OCRInvoiceParser/
        
        # Find and copy tessdata
        TESSDATA_PATH=$(tesseract --tessdata-dir 2>/dev/null || echo "/usr/local/share/tessdata")
        if [ -d "$TESSDATA_PATH" ]; then
          cp -r "$TESSDATA_PATH" dist/OCRInvoiceParser/
        else
          echo "Warning: tessdata directory not found at $TESSDATA_PATH"
        fi
        
        # Find and copy Poppler binaries
        for pdf_tool in pdfinfo pdftoppm pdftotext pdftocairo; do
          PDF_TOOL_PATH=$(which $pdf_tool 2>/dev/null || echo "")
          if [ -n "$PDF_TOOL_PATH" ]; then
            echo "Found $pdf_tool at: $PDF_TOOL_PATH"
            cp "$PDF_TOOL_PATH" dist/OCRInvoiceParser/
          else
            echo "Warning: $pdf_tool not found"
          fi
        done
        
        # Copy required libraries if they exist
        for lib in /usr/local/lib/libpoppler* /opt/homebrew/lib/libpoppler*; do
          if [ -f "$lib" ]; then
            echo "Copying library: $lib"
            cp "$lib" dist/OCRInvoiceParser/
          fi
        done

    - name: Create startup script (Windows)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        echo '@echo off' > dist/OCRInvoiceParser/run.bat
        echo 'setlocal' >> dist/OCRInvoiceParser/run.bat
        echo 'set PATH=%~dp0;%PATH%' >> dist/OCRInvoiceParser/run.bat
        echo 'set TESSDATA_PREFIX=%~dp0\tessdata' >> dist/OCRInvoiceParser/run.bat
        echo 'OCRInvoiceParser.exe %*' >> dist/OCRInvoiceParser/run.bat

    - name: Create startup script (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        echo '#!/bin/bash' > dist/OCRInvoiceParser/run.sh
        echo 'export PATH="$(dirname "$0"):$PATH"' >> dist/OCRInvoiceParser/run.sh
        echo 'export TESSDATA_PREFIX="$(dirname "$0")/tessdata"' >> dist/OCRInvoiceParser/run.sh
        echo '$(dirname "$0")/OCRInvoiceParser "$@"' >> dist/OCRInvoiceParser/run.sh
        chmod +x dist/OCRInvoiceParser/run.sh

    - name: Create README for package
      shell: bash
      run: |
        cat > dist/OCRInvoiceParser/README.txt << 'EOF'
        OCR Invoice Parser - Package
        
        This package contains the OCR Invoice Parser application.
        
        To run the application:
        
        Windows:
        - Double-click run.bat
        - Or run OCRInvoiceParser.exe directly
        
        macOS:
        - Double-click run.sh
        - Or run ./OCRInvoiceParser directly
        
        Requirements:
        - Windows 10+ or macOS 10.14+
        - 4GB RAM recommended
        
        External Dependencies:
        - Tesseract OCR (for text recognition)
        - Poppler utilities (for PDF processing)
        
        If these are not included in the package, you'll need to install them:
        - Tesseract: https://github.com/UB-Mannheim/tesseract/wiki
        - Poppler: https://poppler.freedesktop.org/
        
        Check for TESSERACT_INSTALL_NOTE.txt or POPPLER_INSTALL_NOTE.txt
        in this folder for more information.
        EOF

    - name: Create ZIP archive
      shell: bash
      run: |
        cd dist
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          7z a -tzip OCRInvoiceParser-Windows.zip OCRInvoiceParser/
        else
          zip -r OCRInvoiceParser-macOS.zip OCRInvoiceParser/
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: OCRInvoiceParser-${{ matrix.os }}-folder
        path: dist/OCRInvoiceParser-*.zip

  create-release:
    runs-on: ubuntu-latest
    needs: [build, build-windows-installer]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Prepare release files
      run: |
        # Find and rename the ZIP files
        find . -name "OCRInvoiceParser-*.zip" -exec mv {} . \;
        
        # Find the Windows installer
        find . -name "OCRInvoiceParser-Setup-*.exe" -exec mv {} . \;

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        draft: false
        files: |
          OCRInvoiceParser-Windows.zip
          OCRInvoiceParser-macOS.zip
          OCRInvoiceParser-Setup-*.exe
        body: |
          # OCR Invoice Parser v${{ github.ref_name }}

          ## 🎉 Release

          ### 📦 Downloads
          - **Windows Installer**: OCRInvoiceParser-Setup-${{ github.ref_name }}.exe (Recommended)
          - **Windows Portable**: OCRInvoiceParser-Windows.zip
          - **macOS**: OCRInvoiceParser-macOS.zip

          ### 🚀 Quick Start
          
          **Windows Users (Recommended):**
          1. Download `OCRInvoiceParser-Setup-${{ github.ref_name }}.exe`
          2. Run the installer and follow the setup wizard
          3. Launch from Start Menu or Desktop shortcut
          
          **Portable Installation:**
          1. Download the ZIP file for your platform
          2. Extract the ZIP file to a folder
          3. Run the application:
             - **Windows**: Double-click `run.bat` or `OCRInvoiceParser.exe`
             - **macOS**: Double-click `run.sh` or run `./OCRInvoiceParser`

          ### ✨ What's Included
          - Complete OCR Invoice Parser application
          - **Tesseract OCR** - No separate installation needed
          - **Poppler** - PDF processing tools included
          - All Python dependencies bundled
          - Configuration files included

          ### 📋 System Requirements
          - Windows 10+ or macOS 10.14+
          - 4GB RAM recommended
          - No additional software installation required

          ### 🔧 Manual Installation
          If you prefer to install from source:
          ```bash
          git clone https://github.com/martinfou/ocrinvoice.git
          cd ocrinvoice
          pip install -e .
          python run_ocr_gui.py
          ```

          ### 📝 Package Contents
          - `OCRInvoiceParser.exe` / `OCRInvoiceParser` - Main executable
          - `run.bat` / `run.sh` - Convenient startup scripts
          - `tesseract.exe` / `tesseract` - OCR engine
          - `pdf*` tools - Poppler PDF utilities
          - `config/` - Configuration files
          - `README.txt` - This information
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows-installer:
    runs-on: windows-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install pyinstaller toml

      - name: Install NSIS
        run: choco install nsis -y

      - name: Build Windows installer
        run: python installer/build_installer.py --version ${{ github.ref_name }}

      - name: Find installer
        id: find_installer
        shell: pwsh
        run: |
          $file = Get-ChildItem -Path . -Recurse -Filter "OCRInvoiceParser-Setup-*.exe" | Select-Object -First 1
          echo "INSTALLER_PATH=$($file.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Upload installer as artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: ${{ env.INSTALLER_PATH }} 