# OCR Invoice Parser - Cursor Rules

## Project Overview
This is an OCR invoice parser project that extracts structured data from PDF invoices. The project includes both CLI and GUI components, with a focus on business alias management for improving parsing accuracy.

## Current Development Phase
We are currently working on **Phase 1: Core Functionality (MVP)** of the Business Aliases GUI Manager. This is a PyQt6 desktop application for managing business name aliases used by the OCR invoice parser.

## Key Goals
- Create an intuitive GUI for managing business aliases
- Improve alias accuracy through visual feedback and validation
- Support bulk operations for enterprise users
- Maintain data integrity and provide backup/recovery
- Integrate seamlessly with existing CLI functionality

## Technical Stack
- **Backend**: Python 3.8+ with OCR capabilities (pytesseract, pdf2image, opencv)
- **GUI**: PyQt6 for desktop application
- **Data**: JSON-based alias storage with CLI compatibility
- **Testing**: pytest with pytest-qt for GUI testing
- **Code Quality**: black, flake8, mypy for linting and type checking

## Development Approach
1. **Always fix pre-commit hook issues** before committing (flake8, mypy, black)
2. **Follow the specification** in `docs/architecture/business_aliases_gui_spec.md`
3. **Maintain CLI compatibility** - GUI should use same data formats as CLI
4. **Focus on long-term maintainability** - clean code, proper error handling, comprehensive testing
5. **User experience first** - intuitive interface, helpful error messages, keyboard shortcuts
6. **Documentation standards** - User guides go in `docs/user_guide/`, architecture docs in `docs/architecture/`

## File Structure
```
src/ocrinvoice/
├── cli/                    # Command line interface
├── gui/                    # GUI components (being developed)
│   ├── main_window.py      # Main application window
│   ├── alias_table.py      # Custom table widget
│   ├── alias_form.py       # Add/edit forms
│   ├── dialogs/            # Modal dialogs
│   └── utils/              # GUI utilities
├── business/               # Business logic
├── parsers/                # Invoice parsing logic
└── utils/                  # Shared utilities

docs/
├── architecture/           # Technical specifications and architecture docs
│   ├── business_aliases_gui_spec.md
│   ├── system_architecture.md
│   └── README.md
├── user_guide/             # User-facing documentation
│   ├── getting_started.md
│   ├── cli_reference.md
│   ├── gui_guide.md        # Business Aliases GUI documentation
│   ├── configuration.md
│   └── troubleshooting.md
└── developer/              # Developer documentation
```

## Code Standards
- **Python**: Follow PEP 8, use type hints
- **PyQt6**: Use modern PyQt6 patterns, proper signal/slot connections
- **Error Handling**: Graceful degradation, user-friendly error messages
- **Testing**: Unit tests for business logic, integration tests for GUI
- **Documentation**: Clear docstrings, proper documentation structure
  - User guides: `docs/user_guide/` (e.g., `gui_guide.md`)
  - Architecture specs: `docs/architecture/` (e.g., `business_aliases_gui_spec.md`)
  - Developer docs: `docs/developer/`

## Commit Standards - CRITICAL REQUIREMENTS

### ⚠️ MANDATORY COMMIT REVIEW PROCESS ⚠️

**NEVER, EVER commit without explicit user review and approval of the commit message.**

**REQUIRED WORKFLOW:**
1. **ALWAYS** show the complete commit message to the user first
2. **ALWAYS** ask for review and approval: "Please review this commit message and approve if correct"
3. **NEVER** run `git commit` without user saying "approved" or "commit" after seeing the message
4. **NEVER** assume approval from phrases like "commit" or "go ahead" - explicit review is required
5. **ALWAYS** wait for user confirmation before executing any commit command
6. **ALWAYS** run the the test suite before creating a commit message

**EXAMPLES OF WHAT NOT TO DO:**
- ❌ User says "commit" → immediately run git commit
- ❌ User says "it works fine commit" → immediately run git commit
- ❌ User says "go ahead" → immediately run git commit
- ❌ Any variation without showing the message first

**EXAMPLES OF WHAT TO DO:**
- ✅ Show full commit message → "Please review this commit message and approve if correct"
- ✅ Wait for user to say "approved" or "looks good" → then commit
- ✅ If user says "commit" → show message first, then ask for approval

### Commit Message Requirements
- **Detailed commit messages** with comprehensive information about changes
- **Use conventional commit format**: `type(scope): description`
- **Include context** about why changes were made
- **List all major changes** in bullet points
- **Reference related issues** or specifications when applicable
- **Explain impact** on existing functionality
- **Mention testing** performed or needed

### Commit Message Template
```
type(scope): detailed description of changes

- List all major changes made
- Explain why changes were necessary
- Reference any related issues or specs
- Mention impact on existing functionality
- Note any testing performed
- Include any breaking changes or migrations needed

Example:
feat(gui): implement main window with basic table widget

- Create MainWindow class with PyQt6 QMainWindow
- Add AliasTable widget with QTableWidget
- Implement basic CRUD operations for aliases
- Add toolbar with add/edit/delete actions
- Integrate with existing BusinessAliasManager
- Add status bar with alias count display
- Follow specification from business_aliases_gui_spec.md
- Maintain CLI compatibility for data formats
- Test basic functionality with pytest-qt

```

### Release Commit Messages
**Release script now creates professional commit messages:**
```
release: bump version to X.Y.Z

- Update version numbers across all configuration files
- Prepare for release X.Y.Z
- Automated version bump by release script
```

**Note:** These are automated CI commits and should be clear, informative, and professional. No longer uses generic "Bump version to X.Y.Z" messages.

## Release Management - CRITICAL REQUIREMENTS

### 🚀 RELEASE PROCESS WORKFLOW ⚠️

**When user asks for a release, follow this EXACT process:**

1. **ALWAYS use the release script**: `python scripts/create_release.py --version X.Y.Z`
2. **NEVER manually update version numbers** - the script handles this automatically
3. **ALWAYS run tests** before creating a release (unless `--skip-tests` is specified)
4. **ALWAYS check Git status** - repository must be clean before release
5. **ALWAYS create a draft release** first for review

### Release Script Usage
```bash
# Create a new release (recommended)
python scripts/create_release.py --version 1.2.1

# Dry run to see what would be done
python scripts/create_release.py --version 1.2.1 --dry-run

# Skip tests (use with caution)
python scripts/create_release.py --version 1.2.1 --skip-tests
```

### Version Management
The release script automatically updates version numbers in:
- `src/ocrinvoice/gui/__init__.py` (__version__)
- `src/ocrinvoice/gui/ocr_main_window.py` (About dialog + setApplicationVersion)
- `src/ocrinvoice/gui/main_window.py` (About dialog + setApplicationVersion)
- `pyproject.toml` (if present)
- `README.md` (if version references exist)

### Release Process Steps
1. **Check Git status** - ensure clean repository
2. **Update version numbers** across all files
3. **Run test suite** to ensure everything works
4. **Commit version changes** with proper message
5. **Create Git tag** (vX.Y.Z format)
6. **Push changes and tag** to remote
7. **Build release packages** using PyInstaller
8. **Create GitHub release** (draft for review)

### Post-Release Tasks
After the release script completes:
1. **Review the draft release** on GitHub
2. **Publish the release** when ready
3. **Update documentation** if needed
4. **Announce the release** to users

### Release Notes Template
The script generates release notes automatically, but you can customize them to include:
- What's new in this version
- Bug fixes and improvements
- Installation instructions
- Requirements and dependencies
- Changelog references

### Version Numbering
- Use semantic versioning: MAJOR.MINOR.PATCH (e.g., 1.2.1)
- MAJOR: Breaking changes
- MINOR: New features, backward compatible
- PATCH: Bug fixes, backward compatible

### Emergency Release Process
If urgent fixes are needed:
1. Create hotfix branch from main
2. Apply fixes
3. Test thoroughly
4. Use release script with patch version bump
5. Merge back to main after release

## Important Notes
- Always consider the user experience
- Maintain backward compatibility with CLI
- Follow the detailed specification in the docs
- Focus on clean, maintainable code
- Test thoroughly before committing
- Always run the test suite after each modification.
- When working with a spec document, do a check mark beside the tasks each time you complete a task.
- **NEVER commit without user review of commit message**
- **NEVER assume approval - always ask explicitly**
- **ALWAYS show the commit message first, then ask for approval**
- **ALWAYS use the release script for version management**
- **NEVER manually update version numbers**

## ASCII Art Standards
- **Always ensure all lines align properly** when creating ASCII art mockups
- Use consistent box-drawing characters (┌─┐│└─┘├─┤) throughout
- Maintain proper spacing and indentation for visual clarity
- Ensure all borders and dividers line up perfectly
- Use monospace font considerations when designing layouts
- Test ASCII art readability in plain text editors
- Keep mockups clean and professional for documentation
