[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ocrinvoice"
version = "1.3.23"
description = "Invoice OCR Parser - Extract structured data from PDF invoices using OCR"
authors = [{name = "Invoice OCR Parser Team", email = "support@ocrinvoice.com"}]
readme = "README.md"
requires-python = ">=3.8"
dependencies = [
    "pytesseract",
    "pdf2image",
    "pillow",
    "opencv-python",
    "pandas",
    "numpy",
    "click",
    "pyyaml",
    "pytest",
    "pytest-cov",
    "pytest-qt>=4.2.0",
    "PyQt6>=6.5.0",
    "fuzzywuzzy",
    "PyPDF2",
    "python-Levenshtein",
    "pdfplumber"
]

[project.optional-dependencies]
dev = [
    "black",
    "flake8",
    "mypy",
    "pre-commit",
    "pyinstaller",
    "toml"
]

[project.scripts]
ocrinvoice = "ocrinvoice.cli.main:cli"

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "1.3.23"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pytesseract.*",
    "pdf2image.*",
    "cv2.*",
    "PIL.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short"
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
